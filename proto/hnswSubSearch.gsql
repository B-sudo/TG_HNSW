USE GRAPH Hnsw

CREATE QUERY hnsw_search_layer(VERTEX<RootNode> q, SET<Vertex<RootNode>> ep, INT ef, INT l) 
FOR GRAPH Hnsw RETURNS (SET<Vertex<RootNode>>) SYNTAX V2 {

    /*
    Input: Query Vertex q 
        Enter Points Vertex ep
        Number of nearest to q elements to return ef
        Layer number l
    Output: ef closest neighbor Vertex to q
    */

    TYPEDEF TUPLE <node Vertex, distance Float> Vertex_Item;

    OrAccum @visited;
    HeapAccum<Vertex_Item>(2147483647, distance ASC) @@candidate;
    HeapAccum<Vertex_Item>(2147483647, distance DESC) @@result;
    MaxAccum<FLOAT> @dis;
    SetAccum<Vertex<RootNode>> @@vertex_result;

    start = ep;

    a = SELECT s FROM start:s
        ACCUM s.@visited += TRUE,
            s.@dis += vector_distance_euclidean_straight(s.embedding, q.embedding, s.dim),
            @@candidate += Vertex_Item(s, s.@dis),
            @@result += Vertex_Item(s, s.@dis);

    /* Each element in candidate and result has a computed @dis */
    
    WHILE @@candidate.size() > 0 DO
        IF @@candidate.top().distance > @@result.top().distance
            THEN BREAK;
        END;

        MaxAccum<Vertex<RootNode>> @@enode = @@candidate.pop().node;
        
        
        SetAccum<Vertex<RootNode>> @@seed;

        @@seed.clear();
        @@seed += @@enode;
        start = @@seed;

        
        neighbors = SELECT e FROM start:s -(Link:u)- RootNode:e
            WHERE u.level == l AND NOT e.@visited
            ACCUM 
                e.@visited += TRUE,
                e.@dis += vector_distance_euclidean_straight(e.embedding, q.embedding, e.dim)
            POST-ACCUM IF (@@result.size() < ef OR e.@dis < @@result.top().distance)
                    THEN @@candidate += Vertex_Item(e, e.@dis),
                    @@result += Vertex_Item(e, e.@dis)
                    END;        /* If e is close enough to q or @@result just needs some elements */
        
        WHILE @@result.size() > ef DO
            @@result.pop();
        END;
    END;
    
    WHILE @@result.size() > 0 DO
        @@vertex_result += @@result.pop().node;
    END;

    RETURN @@vertex_result;
}


CREATE QUERY hnsw_select_neighbors_heuristic(VERTEX<RootNode> q, SET<Vertex<RootNode>> C, INT M, INT l, BOOL extendCandidates, BOOL keepPrunedConnections)
FOR GRAPH Hnsw RETURNS (SET<Vertex<RootNode>>) SYNTAX V2 {
    /* 
    Input: Query Vertex q
        Candidate Vertex C 
        Number of neighbors to return M
        Layer number l
        Flag indicating whether or not to extend candidate list extendCandidates
        Flag indicating whether or not to add discarded elements keepPrunedConnections
    Output: M elements selected by the heuristic
    */

    TYPEDEF TUPLE <node Vertex, distance Float> Vertex_Item;

    SetAccum<Vertex<RootNode>> @@result;
    HeapAccum<Vertex_Item>(2147483647, distance ASC) @@work_queue;
    HeapAccum<Vertex_Item>(2147483647, distance ASC) @@discard_queue;
    SetAccum<Vertex<RootNode>> @@start=C;

    seed = C;
    IF extendCandidates 
        THEN a = SELECT t FROM seed:s -(Link:u)- RootNode:t
            WHERE u.level == l
            ACCUM @@start += t;
    END;

    seed = @@start;
    a = SELECT s FROM seed:s
    ACCUM @@work_queue += Vertex_Item(s, vector_distance_euclidean_straight(s.embedding, q.embedding, s.dim));

    WHILE (@@work_queue.size() > 0 AND @@result.size() < M) DO
        
        MaxAccum<FLOAT> @@edis = @@work_queue.top().distance;
        MaxAccum<Vertex> @@enode = @@work_queue.pop().node;
        ListAccum<DOUBLE> @@enode_embedding;
        OrAccum @@close_to_R = FALSE;

        a = SELECT s FROM RootNode:s
            WHERE s == @@enode
            ACCUM @@enode_embedding += s.embedding;

        seed = @@result;
        /* If @@enode is closer to one of currently selected vertexs, than we discard it to avoid clustering */
        a = SELECT s FROM seed:s
            ACCUM IF vector_distance_euclidean_straight(s.embedding, @@enode_embedding, s.dim) < @@edis
                THEN @@close_to_R += TRUE
                END;

        IF NOT @@close_to_R
            THEN @@result += @@enode;
        ELSE @@discard_queue += Vertex_Item(@@enode, @@edis);
        END;
    END;

    IF keepPrunedConnections
        THEN WHILE @@discard_queue.size() > 0 AND @@result.size() < M DO
            @@result += @@discard_queue.pop().node;
            END;
    END;
    
    RETURN @@result;
}

INSTALL QUERY hnsw_search_layer
INSTALL QUERY hnsw_select_neighbors_heuristic
USE GRAPH Hnsw

CREATE QUERY hnsw_insert(VERTEX<RootNode> q, INT M, INT efConstruction, FLOAT mL) 
FOR GRAPH Hnsw SYNTAX V2 {

    /*
    This query inserts a new vexter to a HNSW graph.
    Since all vertexs have been loaded, this query only cares about edges insert and delete.

    Input: Query Vertex q
        Maximum number of connections for each element per layer M
        Size of the dynamic candidate list efConstruction
        Normalization factor for level generation mL
    */

    TYPEDEF TUPLE <INT ep_id, INT top_level> Meta_Data;

    MaxAccum<Meta_Data> @@meta; /*current meta data of HNSW graph, including global entry point and the highest level*/
    MaxAccum<INT> @@l;
    MaxAccum<INT> @@query_id;
    SetAccum<Vertex<RootNode>> @@entry_point;

    a = SELECT m FROM MetaNode:m
        ACCUM @@meta += Meta_Data(m.ep_id, m.top_level);

    @@l += floor(-log(1-rand()*0.999999999) * mL);  /* Randomly generate a maxlevel for the newly inserted vertex q */

    S = {q};

    b = SELECT s FROM S:s
        POST-ACCUM s.maxlevel = @@l,
            @@query_id += s.id;         /* Update the maxlevel of q */

    /* The first inserted vector */
    IF @@meta.ep_id == -1
        THEN UPDATE m FROM MetaNode:m
                SET m.ep_id = @@query_id,
                    m.top_level = @@l;
            RETURN ;
    END;

    b = SELECT s FROM RootNode:s
        WHERE s.id == @@meta.ep_id
        ACCUM @@entry_point += s;

    SetAccum<Vertex<RootNode>> @@W;

    FOREACH cur_level IN RANGE[@@meta.top_level, @@l + 1].step(-1) DO   /* Quickly down to levels that need to add links to q */
        @@W.clear();
        @@W = hnsw_search_layer(q, @@entry_point, 1, cur_level);
        @@entry_point.clear();
        @@entry_point = @@W;
    END;

    MinAccum<INT> @@min_l;
    @@min_l += @@l;
    @@min_l += @@meta.top_level;

    SetAccum<Vertex<RootNode>> @eConn;
    SetAccum<Vertex<RootNode>> @eNewConn;
    SetAccum<Vertex<RootNode>> @eMinusConn;

    FOREACH cur_level IN RANGE[@@min_l, 0].step(-1) DO
        MaxAccum<INT> @@Mmax;
        IF cur_level == 0 THEN @@Mmax = 2*M; ELSE @@Mmax = M; END;

        @@W.clear();
        @@W = hnsw_search_layer(q, @@entry_point, efConstruction, cur_level);
        neighbors = hnsw_select_neighbors_heuristic(q, @@W, @@Mmax, cur_level, FALSE, TRUE);    /* select neighbors of q */

        b = SELECT e FROM neighbors:e
            ACCUM INSERT INTO Link VALUES (e RootNode, q RootNode, cur_level)
            POST-ACCUM e.@eConn.clear(),
                e.@eNewConn.clear(),
                e.@eMinusConn.clear();

        /* Each vertex link to max to Mmax vertexs. After Edge Insertion, neighbors of q may exceed this limitation.
            Thus, they need to select which links to remain, that is @eNewConn; and which to delete, that is @eMinusConn.*/
        b = SELECT e FROM neighbors:e - (Link:u) - RootNode:s
            WHERE u.level == cur_level
            ACCUM 
                e.@eConn += s      //store all neighbors of e to e.@eConn
            POST-ACCUM IF e.@eConn.size() >= @@Mmax // if the number of neighbors of e is too large, shrink
                THEN e.@eNewConn = hnsw_select_neighbors_heuristic(q, e.@eConn, @@Mmax-1, cur_level, FALSE, TRUE),
                    e.@eMinusConn = e.@eConn MINUS e.@eNewConn  //get links to be deleted
                END;
/*
        b = SELECT e FROM neighbors:e
            ACCUM
                IF e.@eConn.size() >= @@Mmax // if the number of neighbors of e is too large, shrink
                THEN e.@eNewConn = hnsw_select_neighbors_heuristic(q, e.@eConn, @@Mmax-1, cur_level, FALSE, TRUE),
                    e.@eMinusConn = e.@eConn MINUS e.@eNewConn  //get links to be deleted
                END;
*/
        /* Delete redundent links of neighbors*/
        b = SELECT e FROM neighbors:e - (Link:u) - RootNode:s
            WHERE u.level == cur_level AND e.@eMinusConn.contains(s)
            ACCUM DELETE(u);

        @@entry_point.clear();
        @@entry_point = @@W;
    END;

    /* A new highest level means a new global entry point */
    IF @@l > @@meta.top_level 
        THEN 
            UPDATE m FROM MetaNode:m
                SET m.ep_id = @@query_id,
                    m.top_level = @@l;
    END;

    PRINT @@query_id,@@meta;
}

INSTALL QUERY hnsw_insert